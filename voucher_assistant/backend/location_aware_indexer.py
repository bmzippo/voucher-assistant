"""
Location-Aware Indexing System cho   AI Voucher Assistant
Advanced geographic intelligence v·ªõi coordinate mapping v√† region analysis
"""

import logging
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
import json
import math
from elasticsearch import Elasticsearch

logger = logging.getLogger(__name__)

@dataclass
class LocationInfo:
    """Th√¥ng tin ƒë·ªãa l√Ω chi ti·∫øt"""
    name: str
    normalized_name: str
    coordinates: Tuple[float, float]  # (longitude, latitude)
    region: str
    province: str
    districts: List[str]
    landmarks: List[str]
    timezone: str
    population_category: str  # small, medium, large, megacity

@dataclass
class GeographicContext:
    """Geographic context cho search v√† ranking"""
    primary_location: LocationInfo
    nearby_locations: List[LocationInfo]
    distance_relevance: Dict[str, float]
    cultural_context: List[str]
    economic_level: str

class LocationAwareIndexer:
    """
    Advanced location-aware indexing system
    Hi·ªÉu v·ªÅ ƒë·ªãa l√Ω Vi·ªát Nam v√† context vƒÉn h√≥a
    """
    
    def __init__(self, es_url: str = "http://localhost:9200"):
        self.es = Elasticsearch([es_url])
        self.location_database = self._build_vietnam_location_database()
        self.distance_threshold = 50  # km
        
        logger.info("üó∫Ô∏è Location-Aware Indexer initialized")
    
    def _build_vietnam_location_database(self) -> Dict[str, LocationInfo]:
        """Build comprehensive Vietnam location database"""
        return {
            'h·∫£i_ph√≤ng': LocationInfo(
                name='H·∫£i Ph√≤ng',
                normalized_name='hai_phong',
                coordinates=(106.6881, 20.8449),
                region='Mi·ªÅn B·∫Øc',
                province='H·∫£i Ph√≤ng',
                districts=['H·ªìng B√†ng', 'L√™ Ch√¢n', 'Ng√¥ Quy·ªÅn', 'Ki·∫øn An', 'H·∫£i An', 'ƒê·ªì S∆°n'],
                landmarks=['C·∫£ng H·∫£i Ph√≤ng', 'ƒê·ªì S∆°n', 'C√°t B√†', 'Ch·ª£ S·∫Øt'],
                timezone='UTC+7',
                population_category='large'
            ),
            'h√†_n·ªôi': LocationInfo(
                name='H√† N·ªôi',
                normalized_name='ha_noi',
                coordinates=(105.8342, 21.0285),
                region='Mi·ªÅn B·∫Øc',
                province='H√† N·ªôi',
                districts=['Ho√†n Ki·∫øm', 'Ba ƒê√¨nh', 'ƒê·ªëng ƒêa', 'Hai B√† Tr∆∞ng', 'C·∫ßu Gi·∫•y', 'T√¢y H·ªì'],
                landmarks=['H·ªì G∆∞∆°m', 'VƒÉn Mi·∫øu', 'Ph·ªë C·ªï', 'H·ªì T√¢y', 'Nh√† h√°t L·ªõn'],
                timezone='UTC+7',
                population_category='megacity'
            ),
            'h·ªì_ch√≠_minh': LocationInfo(
                name='H·ªì Ch√≠ Minh',
                normalized_name='ho_chi_minh',
                coordinates=(106.6297, 10.8231),
                region='Mi·ªÅn Nam',
                province='H·ªì Ch√≠ Minh',
                districts=['Qu·∫≠n 1', 'Qu·∫≠n 3', 'Qu·∫≠n 5', 'Qu·∫≠n 7', 'B√¨nh Th·∫°nh', 'Ph√∫ Nhu·∫≠n'],
                landmarks=['Ch·ª£ B·∫øn Th√†nh', 'Nh√† h√°t Th√†nh ph·ªë', 'Dinh ƒê·ªôc L·∫≠p', 'Bitexco'],
                timezone='UTC+7',
                population_category='megacity'
            ),
            'ƒë√†_n·∫µng': LocationInfo(
                name='ƒê√† N·∫µng',
                normalized_name='da_nang',
                coordinates=(108.2208, 16.0471),
                region='Mi·ªÅn Trung',
                province='ƒê√† N·∫µng',
                districts=['H·∫£i Ch√¢u', 'Thanh Kh√™', 'S∆°n Tr√†', 'Ng≈© H√†nh S∆°n', 'Li√™n Chi·ªÉu'],
                landmarks=['C·∫ßu R·ªìng', 'B√† N√† Hills', 'Ng≈© H√†nh S∆°n', 'Bi·ªÉn M·ªπ Kh√™'],
                timezone='UTC+7',
                population_category='large'
            ),
            'c·∫ßn_th∆°': LocationInfo(
                name='C·∫ßn Th∆°',
                normalized_name='can_tho',
                coordinates=(105.7851, 10.0452),
                region='Mi·ªÅn Nam',
                province='C·∫ßn Th∆°',
                districts=['Ninh Ki·ªÅu', 'B√¨nh Th·ªßy', 'C√°i RƒÉng', '√î M√¥n', 'Th·ªët N·ªët'],
                landmarks=['Ch·ª£ n·ªïi C√°i RƒÉng', 'B·∫øn Ninh Ki·ªÅu', 'C·∫ßu C·∫ßn Th∆°'],
                timezone='UTC+7',
                population_category='medium'
            ),
            'nha_trang': LocationInfo(
                name='Nha Trang',
                normalized_name='nha_trang',
                coordinates=(109.1967, 12.2585),
                region='Mi·ªÅn Trung',
                province='Kh√°nh H√≤a',
                districts=['Nha Trang', 'Vƒ©nh Nguy√™n', 'V·∫°n Th·∫Øng', 'Ph∆∞·ªõc Long'],
                landmarks=['Vinpearl', 'Th√°p B√† Ponagar', 'Bi·ªÉn Nha Trang', 'H√≤n Ch·ªìng'],
                timezone='UTC+7',
                population_category='medium'
            )
        }
    
    def normalize_location_name(self, location: str) -> Optional[str]:
        """Normalize location name to standard format"""
        location_lower = location.lower().strip()
        
        # Direct mapping
        name_mappings = {
            'h·∫£i ph√≤ng': 'h·∫£i_ph√≤ng',
            'hai phong': 'h·∫£i_ph√≤ng',
            'haiphong': 'h·∫£i_ph√≤ng',
            'h√† n·ªôi': 'h√†_n·ªôi',
            'ha noi': 'h√†_n·ªôi',
            'hanoi': 'h√†_n·ªôi',
            'h·ªì ch√≠ minh': 'h·ªì_ch√≠_minh',
            'ho chi minh': 'h·ªì_ch√≠_minh',
            'hcm': 'h·ªì_ch√≠_minh',
            's√†i g√≤n': 'h·ªì_ch√≠_minh',
            'saigon': 'h·ªì_ch√≠_minh',
            'ƒë√† n·∫µng': 'ƒë√†_n·∫µng',
            'da nang': 'ƒë√†_n·∫µng',
            'danang': 'ƒë√†_n·∫µng'
        }
        
        return name_mappings.get(location_lower)
    
    def get_location_info(self, location: str) -> Optional[LocationInfo]:
        """Get detailed location information"""
        normalized = self.normalize_location_name(location)
        if normalized:
            return self.location_database.get(normalized)
        return None
    
    def calculate_distance(self, coord1: Tuple[float, float], 
                          coord2: Tuple[float, float]) -> float:
        """Calculate distance between two coordinates in km"""
        lon1, lat1 = coord1
        lon2, lat2 = coord2
        
        # Haversine formula
        R = 6371  # Earth's radius in km
        
        dlat = math.radians(lat2 - lat1)
        dlon = math.radians(lon2 - lon1)
        
        a = (math.sin(dlat/2) * math.sin(dlat/2) + 
             math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
             math.sin(dlon/2) * math.sin(dlon/2))
        
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        distance = R * c
        
        return distance
    
    def find_nearby_locations(self, target_location: LocationInfo) -> List[LocationInfo]:
        """Find locations within distance threshold"""
        nearby = []
        
        for loc_key, location in self.location_database.items():
            if location.name != target_location.name:
                distance = self.calculate_distance(
                    target_location.coordinates, 
                    location.coordinates
                )
                
                if distance <= self.distance_threshold:
                    nearby.append(location)
        
        # Sort by distance
        nearby.sort(key=lambda x: self.calculate_distance(
            target_location.coordinates, x.coordinates
        ))
        
        return nearby
    
    def build_geographic_context(self, location: str) -> Optional[GeographicContext]:
        """Build comprehensive geographic context"""
        location_info = self.get_location_info(location)
        if not location_info:
            return None
        
        nearby_locations = self.find_nearby_locations(location_info)
        
        # Calculate distance relevance for ranking
        distance_relevance = {}
        for nearby in nearby_locations:
            distance = self.calculate_distance(
                location_info.coordinates, 
                nearby.coordinates
            )
            # Relevance decreases with distance
            relevance = max(0, 1 - (distance / self.distance_threshold))
            distance_relevance[nearby.name] = relevance
        
        # Cultural context
        cultural_context = self._get_cultural_context(location_info)
        
        # Economic level
        economic_level = self._get_economic_level(location_info)
        
        return GeographicContext(
            primary_location=location_info,
            nearby_locations=nearby_locations,
            distance_relevance=distance_relevance,
            cultural_context=cultural_context,
            economic_level=economic_level
        )
    
    def _get_cultural_context(self, location: LocationInfo) -> List[str]:
        """Get cultural context for location"""
        context = [location.region]
        
        # Add cultural characteristics
        cultural_mappings = {
            'H√† N·ªôi': ['th·ªß ƒë√¥', 'l·ªãch s·ª≠', 'vƒÉn h√≥a', 'ch√≠nh tr·ªã', 'gi√°o d·ª•c'],
            'H·ªì Ch√≠ Minh': ['kinh t·∫ø', 'th∆∞∆°ng m·∫°i', 'hi·ªán ƒë·∫°i', 'nƒÉng ƒë·ªông', 'ƒëa vƒÉn h√≥a'],
            'H·∫£i Ph√≤ng': ['c·∫£ng bi·ªÉn', 'c√¥ng nghi·ªáp', 'h·∫£i s·∫£n', 'giao th∆∞∆°ng'],
            'ƒê√† N·∫µng': ['du l·ªãch', 'bi·ªÉn', 'resort', 'ngh·ªâ d∆∞·ª°ng', 's·∫°ch ƒë·∫πp'],
            'C·∫ßn Th∆°': ['mi·ªát v∆∞·ªùn', 's√¥ng n∆∞·ªõc', 'ƒë·∫∑c s·∫£n', 'mi·ªÅn t√¢y'],
            'Nha Trang': ['bi·ªÉn ƒë·∫πp', 'du l·ªãch', 'ngh·ªâ d∆∞·ª°ng', 'h·∫£i s·∫£n', 'vui ch∆°i']
        }
        
        context.extend(cultural_mappings.get(location.name, []))
        return context
    
    def _get_economic_level(self, location: LocationInfo) -> str:
        """Determine economic level of location"""
        economic_mappings = {
            'H√† N·ªôi': 'high',
            'H·ªì Ch√≠ Minh': 'very_high',
            'ƒê√† N·∫µng': 'high', 
            'H·∫£i Ph√≤ng': 'medium_high',
            'C·∫ßn Th∆°': 'medium',
            'Nha Trang': 'medium_high'
        }
        
        return economic_mappings.get(location.name, 'medium')
    
    def create_location_aware_mapping(self) -> Dict[str, Any]:
        """Create Elasticsearch mapping optimized for location awareness"""
        return {
            "mappings": {
                "properties": {
                    "voucher_id": {"type": "keyword"},
                    "voucher_name": {"type": "text", "analyzer": "vietnamese"},
                    "content": {"type": "text", "analyzer": "vietnamese"},
                    
                    # Geographic information
                    "location": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "keyword"},
                            "normalized_name": {"type": "keyword"},
                            "coordinates": {"type": "geo_point"},
                            "region": {"type": "keyword"},
                            "province": {"type": "keyword"},
                            "district": {"type": "keyword"},
                            "cultural_context": {"type": "keyword"},
                            "economic_level": {"type": "keyword"},
                            "population_category": {"type": "keyword"}
                        }
                    },
                    
                    # Geographic embeddings
                    "geo_embedding": {
                        "type": "dense_vector",
                        "dims": 768
                    },
                    
                    # Nearby locations for proximity search
                    "nearby_locations": {
                        "type": "nested",
                        "properties": {
                            "name": {"type": "keyword"},
                            "distance": {"type": "float"},
                            "relevance": {"type": "float"}
                        }
                    },
                    
                    # Location-aware boosting factors
                    "location_boost": {
                        "type": "object",
                        "properties": {
                            "exact_match": {"type": "float"},
                            "regional_match": {"type": "float"},
                            "cultural_match": {"type": "float"},
                            "economic_match": {"type": "float"}
                        }
                    },
                    
                    # Standard fields
                    "embeddings": {
                        "type": "dense_vector",
                        "dims": 768
                    },
                    
                    "metadata": {"type": "object"},
                    "created_at": {"type": "date"},
                    "updated_at": {"type": "date"}
                }
            },
            "settings": {
                "analysis": {
                    "analyzer": {
                        "vietnamese": {
                            "tokenizer": "standard",
                            "filter": ["lowercase", "stop"]
                        }
                    }
                }
            }
        }
    
    def enhance_voucher_with_location_data(self, voucher_data: Dict[str, Any]) -> Dict[str, Any]:
        """Enhance voucher data v·ªõi comprehensive location information"""
        enhanced_data = voucher_data.copy()
        
        # Extract location from metadata or content
        location = voucher_data.get('metadata', {}).get('location', '')
        if not location:
            # Try to extract from content
            location = self._extract_location_from_content(voucher_data.get('content', ''))
        
        if location:
            geo_context = self.build_geographic_context(location)
            if geo_context:
                enhanced_data['location'] = {
                    'name': geo_context.primary_location.name,
                    'normalized_name': geo_context.primary_location.normalized_name,
                    'coordinates': {
                        'lat': geo_context.primary_location.coordinates[1],
                        'lon': geo_context.primary_location.coordinates[0]
                    },
                    'region': geo_context.primary_location.region,
                    'province': geo_context.primary_location.province,
                    'cultural_context': geo_context.cultural_context,
                    'economic_level': geo_context.economic_level,
                    'population_category': geo_context.primary_location.population_category
                }
                
                # Add nearby locations
                enhanced_data['nearby_locations'] = [
                    {
                        'name': nearby.name,
                        'distance': self.calculate_distance(
                            geo_context.primary_location.coordinates,
                            nearby.coordinates
                        ),
                        'relevance': geo_context.distance_relevance.get(nearby.name, 0)
                    }
                    for nearby in geo_context.nearby_locations
                ]
                
                # Calculate location boost factors
                enhanced_data['location_boost'] = self._calculate_location_boost_factors(geo_context)
        
        return enhanced_data
    
    def _extract_location_from_content(self, content: str) -> Optional[str]:
        """Extract location from voucher content"""
        content_lower = content.lower()
        
        for location_name in self.location_database.keys():
            location_info = self.location_database[location_name]
            if location_info.name.lower() in content_lower:
                return location_info.name
        
        return None
    
    def _calculate_location_boost_factors(self, geo_context: GeographicContext) -> Dict[str, float]:
        """Calculate boost factors for different location matching scenarios"""
        return {
            'exact_match': 2.0,  # Exact location match
            'regional_match': 1.5,  # Same region
            'cultural_match': 1.3,  # Similar cultural context
            'economic_match': 1.2,  # Similar economic level
            'proximity_match': 1.4  # Nearby location
        }
    
    def create_geo_aware_search_query(self, query: str, parsed_components: Dict[str, Any],
                                    top_k: int = 10) -> Dict[str, Any]:
        """Create geo-aware search query for Elasticsearch"""
        
        query_location = parsed_components.get('location')
        geo_context = None
        
        if query_location:
            geo_context = self.build_geographic_context(query_location)
        
        # Base vector search
        search_body = {
            "query": {
                "bool": {
                    "must": [
                        {
                            "script_score": {
                                "query": {"match_all": {}},
                                "script": {
                                    "source": "cosineSimilarity(params.query_vector, 'embeddings') + 1.0",
                                    "params": {"query_vector": parsed_components.get('query_embedding', [])}
                                }
                            }
                        }
                    ],
                    "should": [],  # For location boosting
                    "filter": []
                }
            },
            "size": top_k,
            "_source": ["voucher_id", "voucher_name", "content", "location", "nearby_locations", "location_boost"]
        }
        
        # Add location-based boosting
        if geo_context:
            # Exact location match (highest boost)
            search_body["query"]["bool"]["should"].append({
                "term": {
                    "location.name": {
                        "value": geo_context.primary_location.name,
                        "boost": 3.0
                    }
                }
            })
            
            # Regional match
            search_body["query"]["bool"]["should"].append({
                "term": {
                    "location.region": {
                        "value": geo_context.primary_location.region,
                        "boost": 1.8
                    }
                }
            })
            
            # Cultural context match
            for cultural_element in geo_context.cultural_context:
                search_body["query"]["bool"]["should"].append({
                    "term": {
                        "location.cultural_context": {
                            "value": cultural_element,
                            "boost": 1.5
                        }
                    }
                })
            
            # Nearby locations match
            for nearby in geo_context.nearby_locations:
                boost_factor = 1.0 + geo_context.distance_relevance.get(nearby.name, 0)
                search_body["query"]["bool"]["should"].append({
                    "term": {
                        "location.name": {
                            "value": nearby.name,
                            "boost": boost_factor
                        }
                    }
                })
            
            # Geographic proximity filter (optional strict filtering)
            if parsed_components.get('strict_location', False):
                search_body["query"]["bool"]["filter"].append({
                    "geo_distance": {
                        "distance": f"{self.distance_threshold}km",
                        "location.coordinates": {
                            "lat": geo_context.primary_location.coordinates[1],
                            "lon": geo_context.primary_location.coordinates[0]
                        }
                    }
                })
        
        return search_body
    
    def explain_geographic_ranking(self, results: List[Dict[str, Any]], 
                                 query_location: str) -> str:
        """Explain how geographic factors influenced ranking"""
        explanation = f"K·∫øt qu·∫£ t√¨m ki·∫øm cho ƒë·ªãa ƒëi·ªÉm: {query_location}\n\n"
        
        geo_context = self.build_geographic_context(query_location)
        if not geo_context:
            return explanation + "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªãa l√Ω cho location n√†y."
        
        explanation += f"üìç Th√¥ng tin ƒë·ªãa l√Ω:\n"
        explanation += f"- T·ªça ƒë·ªô: {geo_context.primary_location.coordinates}\n"
        explanation += f"- V√πng: {geo_context.primary_location.region}\n"
        explanation += f"- B·ªëi c·∫£nh vƒÉn h√≥a: {', '.join(geo_context.cultural_context)}\n"
        explanation += f"- M·ª©c kinh t·∫ø: {geo_context.economic_level}\n\n"
        
        explanation += f"üéØ Ranking factors:\n"
        for i, result in enumerate(results[:5], 1):
            location_data = result.get('location', {})
            result_location = location_data.get('name', 'Unknown')
            
            if result_location == query_location:
                explanation += f"{i}. {result.get('voucher_name', '')[:50]}... (EXACT MATCH ‚úÖ)\n"
            elif location_data.get('region') == geo_context.primary_location.region:
                explanation += f"{i}. {result.get('voucher_name', '')[:50]}... (SAME REGION üåç)\n"
            else:
                explanation += f"{i}. {result.get('voucher_name', '')[:50]}... (OTHER LOCATION üìç)\n"
        
        if geo_context.nearby_locations:
            explanation += f"\nüó∫Ô∏è ƒê·ªãa ƒëi·ªÉm l√¢n c·∫≠n ƒë∆∞·ª£c xem x√©t:\n"
            for nearby in geo_context.nearby_locations[:3]:
                distance = self.calculate_distance(
                    geo_context.primary_location.coordinates,
                    nearby.coordinates
                )
                explanation += f"- {nearby.name} ({distance:.1f}km)\n"
        
        return explanation
